<?xml version="1.0" encoding="utf-8"?>
<views:ExampleViewBase xmlns:fx="http://ns.adobe.com/mxml/2009"
    xmlns:s="library://ns.adobe.com/flex/spark"
	xmlns:mx="library://ns.adobe.com/flex/mx"
	xmlns:views="org.gestouch.examples.views.*"
	xmlns:controls="org.gestouch.examples.controls.*"
	xmlns:containers="org.gestouch.examples.containers.*"
	>
	
	<fx:Script>
		<![CDATA[
			import com.greensock.TweenMax;
			import com.greensock.plugins.GlowFilterPlugin;
			import com.greensock.plugins.TweenPlugin;
			import org.gestouch.core.DisplayObjectAdapter;
			import org.gestouch.events.TapGestureEvent;
			import org.gestouch.gestures.TapGesture;

			
			
			private var tapGesture:TapGesture;


			override protected function init():void
			{
				super.init();
				
				TweenPlugin.activate([GlowFilterPlugin]);				
			}
			
			
			override protected function onViewActivate():void
			{
				super.onViewActivate();
				
				tapGesture = new TapGesture(new DisplayObjectAdapter(button));
				tapGesture.addEventListener(TapGestureEvent.GESTURE_TAP, onGesture, false, 0, true);
				
				slopSlider.value = tapGesture.slop;
				touchesSlider.value = tapGesture.numTouchesRequired;
				tapsSlider.value = tapGesture.numTapsRequired;
				maxTapDelaySlider.value = tapGesture.maxTapDelay;
				maxTapDurationSlider.value = tapGesture.maxTapDuration;
			}
			
			
			override protected function onViewDeactivate():void
			{
				super.onViewDeactivate();
				
				// It is strongly recommended to remove listeners and dispose gesture instance manually
				if (tapGesture)
				{
					tapGesture.removeEventListener(TapGestureEvent.GESTURE_TAP, onGesture);
					tapGesture.dispose();
					tapGesture = null;
				}
			}
			

			private function onGesture(event:TapGestureEvent):void
			{
				TweenMax.fromTo(button, 1,
					{glowFilter: {color: 0xCCCCCC * Math.random(), blurX: 64, blurY: 64, strength: 3, alpha: 1, quality: 1}},
					{glowFilter: {alpha: 0, remove: true}}
				);
			}
			
			
			private function onSlopSliderChange(event:Event = null):void
			{
				if (tapGesture)
				{
					tapGesture.slop = slopSlider.value;
				}
			}
			
			
			private function onTouchesSliderChange(event:Event = null):void
			{
				if (tapGesture)
				{
					tapGesture.numTouchesRequired = touchesSlider.value;
				}
			}
			
			
			private function onTapsSliderChange(event:Event = null):void
			{
				if (tapGesture)
				{
					tapGesture.numTapsRequired = tapsSlider.value;
				}
			}
			
			
			private function onMaxTapDelaySliderChange(event:Event = null):void
			{
				if (tapGesture)
				{
					tapGesture.maxTapDelay = maxTapDelaySlider.value;
				}
			}
			
			
			private function onMaxTapDurationSliderChange(event:Event = null):void
			{
				if (tapGesture)
				{
					tapGesture.maxTapDuration = maxTapDurationSlider.value;
				}
			}
		]]>
	</fx:Script>
	
	<s:Button id="button" label="Tap Me" minWidth="400" minHeight="300" horizontalCenter="0" verticalCenter="0"/>

	<fx:Declarations>
		<containers:SettingsPanel id="settings">	
			<s:Label text="slop"/>
			<s:HSlider id="slopSlider"
				minimum="0" maximum="50" stepSize="1" dataTipPrecision="0"
				change="onSlopSliderChange(event)"/>
			
			<s:Label text="numTouchesRequired"/>
			<s:HSlider id="touchesSlider"
				minimum="1" maximum="4" stepSize="1" dataTipPrecision="0"
				change="onTouchesSliderChange(event)"/>
			
			<s:Label text="numTapsRequired"/>
			<s:HSlider id="tapsSlider"
				minimum="1" maximum="4" stepSize="1" dataTipPrecision="0"
				change="onTapsSliderChange(event)"/>
			
			<s:Label text="maxTapDelay"/>
			<s:HSlider id="maxTapDelaySlider"
				minimum="300" maximum="1000" stepSize="100" dataTipPrecision="0"
				change="onMaxTapDelaySliderChange(event)"/>
			
			<s:Label text="maxTapDuration"/>
			<s:HSlider id="maxTapDurationSlider"
				minimum="500" maximum="5000" stepSize="100" dataTipPrecision="0"
				change="onMaxTapDurationSliderChange(event)"/>
		</containers:SettingsPanel>
	</fx:Declarations>
	
</views:ExampleViewBase>